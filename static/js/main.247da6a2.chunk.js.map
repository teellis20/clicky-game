{"version":3,"sources":["components/CastCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["CastCard","props","className","onClick","markLast","checkIfClicked","id","name","alt","src","photo","Wrapper","children","Navbar","correctly","score","topScore","App","state","cast","shuffleArray","array","i","length","j","Math","floor","random","temp","resetScore","setState","resetClicked","item","lastClicked","updateScore","result","map","console","log","shuffledCast","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6qEAkBeA,MAff,SAAkBC,GACd,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,gBAAgBC,QAAS,WACpCF,EAAMG,SAASH,GACfA,EAAMI,eAAeJ,KAIrB,yBAAKK,GAAIL,EAAMM,KAAMC,IAAKP,EAAMM,KAAME,IAAKR,EAAMS,W,MCLlDC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,aCU1BC,MAVf,SAAgBZ,GACZ,OACI,yBAAKC,UAAU,4CACP,2CACA,4BAAKD,EAAMa,WACX,sCAAYb,EAAMc,MAAlB,iBAAuCd,EAAMe,YCFzDD,EAAQ,EACRC,EAAW,EACXF,EAAY,2BA0FDG,E,2MAxFbC,MAAQ,CACNC,OACAJ,QACAC,WACAF,a,EAIFM,aAAe,SAACC,GAEd,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,G,EAGTQ,WAAa,kBAAM,EAAKC,SAAS,CAAEf,MAAO,K,EAE1CgB,aAAe,SAACC,GAAD,OAAUA,EAAKC,aAAc,G,EAE5CC,YAAc,WACT,EAAKhB,MAAMH,OAAS,EAAKG,MAAMF,UAChC,EAAKc,SAAS,CAAEf,MAAO,EAAKG,MAAMH,MAAQ,IAC1C,EAAKe,SAAS,CAAEd,SAAU,EAAKE,MAAMH,MAAQ,MAE7C,EAAKe,SAAS,CAAEf,MAAO,EAAKG,MAAMH,MAAQ,IAC1C,EAAKe,SAAS,CAAEd,SAAU,EAAKE,MAAMF,a,EAKzCX,eAAiB,SAAA8B,GACZA,EAAOF,aACR,EAAKJ,aACL,EAAKC,SAAS,CAAEhB,UAAW,6BAE3B,EAAKI,MAAMC,KAAKiB,IAAI,EAAKL,cACzB,EAAKD,SAAS,CAAEX,WAEhB,EAAKe,cACL,EAAKJ,SAAS,CAAEhB,UAAW,6B,EAI/BV,SAAW,SAAA+B,GACTE,QAAQC,IAAIH,EAAOF,aACnBd,EAAKc,aAAc,EACjB,IAAK,IAAIX,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC3Ba,EAAO7B,KAAOa,EAAKG,GAAGhB,KACxBa,EAAKG,GAAGW,aAAc,EACtBI,QAAQC,IAAInB,EAAKG,GAAGW,cAGxB,EAAKH,SAAS,CAAEX,U,wEAGZ,IAAD,OACDoB,EAAeC,KAAKpB,aAAaoB,KAAKtB,MAAMC,MAClD,OACE,6BACE,kBAAC,EAAD,CACAJ,MAAOyB,KAAKtB,MAAMH,MAClBC,SAAUwB,KAAKtB,MAAMF,SACrBF,UAAW0B,KAAKtB,MAAMJ,YAItB,kBAAC,EAAD,KACCyB,EAAaH,KAAI,SAAAjB,GAAI,OACpB,kBAAC,EAAD,CACAd,eAAgB,EAAKA,eACrBD,SAAU,EAAKA,SACfE,GAAIa,EAAKb,GACTmC,IAAKtB,EAAKb,GACVC,KAAMY,EAAKZ,KACX0B,YAAad,EAAKc,YAClBvB,MAAOS,EAAKT,iB,GAhFFgC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.247da6a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CastCard(props) {\r\n    return(\r\n        <div className=\"card\">\r\n            <div className=\"img-container\" onClick={() => {\r\n                props.markLast(props);\r\n                props.checkIfClicked(props);\r\n            }\r\n            } \r\n            >\r\n                <img id={props.name} alt={props.name} src={props.photo} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CastCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar sticky-top navbar-dark bg-primary\">\r\n                <li>Clicky Game</li>\r\n                <li>{props.correctly}</li>\r\n                <li>Score: {props.score} | Top Score: {props.topScore}</li>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport CastCard from \"./components/CastCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport cast from \"./cast.json\";\nimport Navbar from './components/Navbar';\n\nlet score = 0;\nlet topScore = 0;\nlet correctly = \"Click an image to begin!\"\nclass App extends Component {\n  state = {\n    cast,\n    score,\n    topScore,\n    correctly\n  };\n\n  // shuffle the photos on click\n  shuffleArray = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  resetScore = () => this.setState({ score: 0 });\n\n  resetClicked = (item) => item.lastClicked = false;\n\n  updateScore = () => {\n    if(this.state.score >= this.state.topScore) {\n      this.setState({ score: this.state.score + 1});\n      this.setState({ topScore: this.state.score + 1 })\n    } else {\n      this.setState({ score: this.state.score + 1});\n      this.setState({ topScore: this.state.topScore })\n    }\n  }\n\n\n  checkIfClicked = result => {\n    if(result.lastClicked) {\n      this.resetScore();\n      this.setState({ correctly: \"You guessed incorrectly!\"}\n      );\n      this.state.cast.map(this.resetClicked);\n      this.setState({ cast });\n    } else {\n      this.updateScore();\n      this.setState({ correctly: \"You guessed correctly!\"})\n    };\n  }\n\n  markLast = result => {\n    console.log(result.lastClicked);\n    cast.lastClicked = true;\n      for (let i = 0; i < cast.length; i++) {\n        if (result.id === cast[i].id) {\n          cast[i].lastClicked = true;\n          console.log(cast[i].lastClicked);\n        }\n      }\n      this.setState({ cast });\n};\n\nrender() {\n  const shuffledCast = this.shuffleArray(this.state.cast)\n  return (\n    <div>\n      <Navbar\n      score={this.state.score}\n      topScore={this.state.topScore}\n      correctly={this.state.correctly}\n      />\n      \n\n      <Wrapper>\n      {shuffledCast.map(cast => (\n        <CastCard \n        checkIfClicked={this.checkIfClicked}\n        markLast={this.markLast}\n        id={cast.id}\n        key={cast.id}\n        name={cast.name}\n        lastClicked={cast.lastClicked}\n        photo={cast.photo}  \n        />\n        ))}\n        </Wrapper>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}